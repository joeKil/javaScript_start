사용자 입력 값 받기 - prompt() 함수
사용자에게 값을 입력받을 때 가장 쉽게 사용할 수 있는 함수

알림창으로 출력하기 - alert

웹 브라우저 화면에 출력하기 - document.wirte() 함수
결과값을 웹 브라우저 화면에 출력
ex)
var name = prompt("이름: ");
document.write(name + "님, 어서오세요!");
-> document < 엘리먼트

[ 자바스크립트 규칙 ]
- 대소문자를 구별하여 소스를 작성한다
- 읽기 쉽게 들여쓰는 습관을 들인다
- 세미콜론으로 문장 구분
- 소스에 메모하려면 주석 사용
- 식별자는 정해진 규칙을 지켜 작성한다
- 예약어는 식별자로 사용할 수 없다

소스를 작성하고 난 후에.. 이게 어떻게 돌아가는지 주석으로 남겨놓으면 도움이 된다.

식별자 < 함수, 속성등.. 직접 이름을 붙여준 특정단어..
예약어 < var, const, else, for, this, void, while..등등..


tip .. : 설치파일 폴더에 필요한 것들을 모아놓으면 좋다..

em : 단위. 대문자 M 기준. 웹브라우저 나타내는 거 기존 16px

[ 변수를 선언하는 규칙 세가지 ]
- 이름은 의미있게 짓는다
- 여러 단어를 연결한 변수 이름을 낙타 모양으로 만들어 준다
- 변수 이름의 첫 글자는 반드시 문자나 밑줄(_), 달러 기호($)로 시작해야 한다. ex) last_Day < 밑줄은 보통 전역으로 쓸 변수들을 의미하는 개발자들도 많다.


[ CPU의 참조를 가장 적게 받으려고 한다면, if~else if~else if 구문을 사용하는 것이 좋다. ]

[ 반복문 ]
- 카운터 변수를 기준으로 명령을 여러번 실행
- 여러 명령을 늘어놓지 않고 소스를 간단하게 작성할 수 있음
- 소스의 양이 줄어 실행속도가 빠름

[ 두 개 이상의 for문 중첩 사용 ]
ex)
        1          2    3
for (var i = 2; i <= 9; i++) {
            4          5    6
    for (var j = 1; j <= 9; j++ {

    }
}

for (var i = 2; i <= 9; i++) {
    documnet.write("<div>")
    documnet.write("<h3>" + i + "단</h3>");
    for (var j = 1; j <= 9; j++ {
        document.write(i + " X " + j + " = " + i * j + "<br>");
    }
    document.write("</div>")
}

- 반복 횟수 기준이라면 for문
- 특정 조건에 따라 반복한다면 while문, do...while문

while문은 무한루프 전용.. 자판기.. 공장..
do-while문.. 사용자에게 일단 물어봄.. 계속 하시겠습니까? 이런거..

[ 복합대입연산자 ]
a+=b < 이런거.. a + b를 먼저 수행한 후에 a에 값을 저장..
